********************************************************************
	* PREDICT 411 | UNIT 03
	* Julia Barnhart
	* Spring 2017
********************************************************************;

****************************************************************************************************************
PART 0: MACRO INITIALIZATION
****************************************************************************************************************;

**************************************
* MACRO for basic statistics
**************************************;

%macro statistics(c, INFILE);

*descriptive statistics and number of missing records;
proc means data= &INFILE. n nmiss mean stddev p1 p5 p95 p99 min max;
var &c;
run; quit;

*histogram;
*goptions hsize=4in vsize=3in;
proc univariate data= &INFILE. noprint;
histogram &c;
run;

*boxplot;
ods graphics on / width=1.5in height=2in;
proc sgplot data= &INFILE.;
vbox &c;
run;

* scatterplot;
* ods graphics on / width=3.6in height=2.75in;
* PROC SGPLOT DATA= &INFILE.;
* REG X=&c Y=TARGET_WINS /NOMARKERS lineattrs = (color = blue thickness = 4 pattern=solid);
* LOESS X=&c Y=TARGET_WINS / lineattrs = (color = red thickness = 4 pattern=solid);
* run;
* ods graphics on / reset=all;

*extreme observations;
ods select ExtremeObs;
proc univariate data= &INFILE.;
var &c;
run;
ods graphics off;

%mend;

**************************************
* MACRO for imputation and transformation;
**************************************;
%macro Wine_Imp_Trans(INFILE, OUTFILE);

data &OUTFILE.;
set &INFILE.;


* Imputation and variable transformation copied from SAS Enterprise Miner below;

*------------------------------------------------------------*;
* EM SCORE CODE;
* EM Version: 14.1;
* SAS Release: 9.04.01M3P062415;
* Host: odaws04-prod-us;
* Encoding: utf-8;
* Locale: en_US;
* Project Path: /home/juliabarnhart20190;
* Project Name: Wine;
* Diagram Id: EMWS1;
* Diagram Name: 01_Main;
* Generated by: juliabarnhart20190;
* Date: 25MAY2017:07:50:52;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Input Data Source;
* TYPE: SAMPLE;
* NODE: Ids;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Metadata Node;
* TYPE: UTILITY;
* NODE: Meta;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Partition Class;
* TYPE: SAMPLE;
* NODE: Part;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Metadata Node;
* TYPE: UTILITY;
* NODE: Meta2;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Imputation;
* TYPE: MODIFY;
* NODE: Impt;
*------------------------------------------------------------*;
*;
* TREE IMPUTATION;
*;
*;
* IMPUTE VARIABLE: Alcohol;
*;
label IMP_Alcohol = 'Imputed Alcohol';
IMP_Alcohol = Alcohol;
if missing(IMP_Alcohol) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_Alcohol = 'Predicted: Alcohol';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(Density ) AND
Density < 0.994285 THEN DO;
IF NOT MISSING(Density ) AND
0.98728 <= Density THEN DO;
IF NOT MISSING(Density ) AND
0.992535 <= Density THEN DO;
P_Alcohol = 10.5654650645304;
END;
ELSE DO;
P_Alcohol = 11.5743849986886;
END;
END;
ELSE DO;
P_Alcohol = 10.3858993710691;
END;
END;
ELSE DO;
IF NOT MISSING(Density ) AND
1.001185 <= Density THEN DO;
IF NOT MISSING(ResidualSugar ) AND
4.75 <= ResidualSugar THEN DO;
P_Alcohol = 10.0653533190578;
END;
ELSE DO;
P_Alcohol = 10.8548429319371;
END;
END;
ELSE DO;
IF NOT MISSING(FreeSulfurDioxide ) AND
27.5 <= FreeSulfurDioxide THEN DO;
P_Alcohol = 9.58896729776246;
END;
ELSE DO;
P_Alcohol = 10.2294826048171;
END;
END;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: Alcohol;
*;
IMP_Alcohol = P_ALCOHOL;
END;
*;
* IMPUTE VARIABLE: Chlorides;
*;
label IMP_Chlorides = 'Imputed Chlorides';
IMP_Chlorides = Chlorides;
if missing(IMP_Chlorides) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_Chlorides = 'Predicted: Chlorides';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(AcidIndex ) AND
8.5 <= AcidIndex THEN DO;
P_Chlorides = 0.07790238095238;
END;
ELSE DO;
P_Chlorides = 0.04943708803281;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: Chlorides;
*;
IMP_Chlorides = P_CHLORIDES;
END;
*;
* IMPUTE VARIABLE: FreeSulfurDioxide;
*;
label IMP_FreeSulfurDioxide = 'Imputed FreeSulfurDioxide';
IMP_FreeSulfurDioxide = FreeSulfurDioxide;
if missing(IMP_FreeSulfurDioxide) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_FreeSulfurDioxide = 'Predicted: FreeSulfurDioxide';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(AcidIndex ) AND
9.5 <= AcidIndex THEN DO;
P_FreeSulfurDioxide = 3.12585969738651;
END;
ELSE DO;
P_FreeSulfurDioxide = 32.7071566731141;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: FreeSulfurDioxide;
*;
IMP_FreeSulfurDioxide = P_FREESULFURDIOXIDE;
END;
*;
* IMPUTE VARIABLE: ResidualSugar;
*;
label IMP_ResidualSugar = 'Imputed ResidualSugar';
IMP_ResidualSugar = ResidualSugar;
if missing(IMP_ResidualSugar) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_ResidualSugar = 'Predicted: ResidualSugar';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(TotalSulfurDioxide ) AND
157.5 <= TotalSulfurDioxide THEN DO;
P_ResidualSugar = 8.22742429397753;
END;
ELSE DO;
IF NOT MISSING(LabelAppeal ) AND
0.5 <= LabelAppeal THEN DO;
P_ResidualSugar = 6.49356913183283;
END;
ELSE DO;
P_ResidualSugar = 3.19417655786349;
END;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: ResidualSugar;
*;
IMP_ResidualSugar = P_RESIDUALSUGAR;
END;
*;
* IMPUTE VARIABLE: STARS;
*;
label IMP_STARS = 'Imputed STARS';
IMP_STARS = STARS;
if missing(IMP_STARS) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_STARS = 'Predicted: STARS';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(LabelAppeal ) AND
0.5 <= LabelAppeal THEN DO;
IF NOT MISSING(Alcohol ) AND
Alcohol < 11.025 THEN DO;
IF NOT MISSING(LabelAppeal ) AND
1.5 <= LabelAppeal THEN DO;
P_STARS = 2.62937062937062;
END;
ELSE DO;
P_STARS = 2.28059071729957;
END;
END;
ELSE DO;
IF NOT MISSING(VolatileAcidity ) AND
0.285 <= VolatileAcidity THEN DO;
P_STARS = 2.4296875;
END;
ELSE DO;
P_STARS = 2.7084233261339;
END;
END;
END;
ELSE DO;
IF NOT MISSING(LabelAppeal ) AND
LabelAppeal < -0.5 THEN DO;
IF NOT MISSING(LabelAppeal ) AND
LabelAppeal < -1.5 THEN DO;
P_STARS = 1.36279069767441;
END;
ELSE DO;
P_STARS = 1.66108506363027;
END;
END;
ELSE DO;
IF NOT MISSING(Alcohol ) AND
Alcohol < 10.95 THEN DO;
IF NOT MISSING(ResidualSugar ) AND
ResidualSugar < 78.15 THEN DO;
P_STARS = 1.92649006622516;
END;
ELSE DO;
P_STARS = 2.28421052631578;
END;
END;
ELSE DO;
IF NOT MISSING(Chlorides ) AND
Chlorides < 0.0415 THEN DO;
P_STARS = 2.2074074074074;
END;
ELSE DO;
P_STARS = 1.99112426035503;
END;
END;
END;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: STARS;
*;
IMP_STARS = P_STARS;
END;
*;
* IMPUTE VARIABLE: Sulphates;
*;
label IMP_Sulphates = 'Imputed Sulphates';
IMP_Sulphates = Sulphates;
if missing(IMP_Sulphates) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_Sulphates = 'Predicted: Sulphates';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(AcidIndex ) AND
10.5 <= AcidIndex THEN DO;
IF NOT MISSING(VolatileAcidity ) AND
VolatileAcidity < -0.9575 THEN DO;
P_Sulphates = -0.26846153846153;
END;
ELSE DO;
P_Sulphates = 0.75132492113564;
END;
END;
ELSE DO;
P_Sulphates = 0.52365154824617;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: Sulphates;
*;
IMP_Sulphates = P_SULPHATES;
END;
*;
* IMPUTE VARIABLE: TotalSulfurDioxide;
*;
label IMP_TotalSulfurDioxide = 'Imputed TotalSulfurDioxide';
IMP_TotalSulfurDioxide = TotalSulfurDioxide;
if missing(IMP_TotalSulfurDioxide) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_TotalSulfurDioxide = 'Predicted: TotalSulfurDioxide';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(ResidualSugar ) AND
ResidualSugar < 6.15 THEN DO;
IF NOT MISSING(AcidIndex ) AND
8.5 <= AcidIndex THEN DO;
P_TotalSulfurDioxide = 71.9256198347107;
END;
ELSE DO;
IF NOT MISSING(pH ) AND
pH < 0.70499999999999 THEN DO;
P_TotalSulfurDioxide = -390.8;
END;
ELSE DO;
P_TotalSulfurDioxide = 111.530832622904;
END;
END;
END;
ELSE DO;
IF NOT MISSING(AcidIndex ) AND
10.5 <= AcidIndex THEN DO;
P_TotalSulfurDioxide = 36.5086206896551;
END;
ELSE DO;
IF NOT MISSING(FreeSulfurDioxide ) AND
FreeSulfurDioxide < 36.5 THEN DO;
P_TotalSulfurDioxide = 124.333245243128;
END;
ELSE DO;
P_TotalSulfurDioxide = 155.63399189463;
END;
END;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: TotalSulfurDioxide;
*;
IMP_TotalSulfurDioxide = P_TOTALSULFURDIOXIDE;
END;
*;
* IMPUTE VARIABLE: pH;
*;
label IMP_pH = 'Imputed pH';
IMP_pH = pH;
if missing(IMP_pH) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_pH = 'Predicted: pH';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(AcidIndex ) AND
AcidIndex < 7.5 THEN DO;
P_pH = 3.25325620229007;
END;
ELSE DO;
P_pH = 3.17552222222222;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: pH;
*;
IMP_pH = P_PH;
END;
*;
* Drop prediction variables since they are for INPUTS not TARGETS;
* Replace _NODE_ by _XODE_ so it can be safely dropped;
*;
drop
P_Alcohol
P_Chlorides
P_FreeSulfurDioxide
P_ResidualSugar
P_STARS
P_Sulphates
P_TotalSulfurDioxide
P_pH
;
*;
*INDICATOR VARIABLES;
*;
label M_Alcohol = "Imputation Indicator for Alcohol";
if missing(Alcohol) then M_Alcohol = 1;
else M_Alcohol= 0;
label M_Chlorides = "Imputation Indicator for Chlorides";
if missing(Chlorides) then M_Chlorides = 1;
else M_Chlorides= 0;
label M_FreeSulfurDioxide = "Imputation Indicator for FreeSulfurDioxide";
if missing(FreeSulfurDioxide) then M_FreeSulfurDioxide = 1;
else M_FreeSulfurDioxide= 0;
label M_ResidualSugar = "Imputation Indicator for ResidualSugar";
if missing(ResidualSugar) then M_ResidualSugar = 1;
else M_ResidualSugar= 0;
label M_STARS = "Imputation Indicator for STARS";
if missing(STARS) then M_STARS = 1;
else M_STARS= 0;
label M_Sulphates = "Imputation Indicator for Sulphates";
if missing(Sulphates) then M_Sulphates = 1;
else M_Sulphates= 0;
label M_TotalSulfurDioxide = "Imputation Indicator for TotalSulfurDioxide";
if missing(TotalSulfurDioxide) then M_TotalSulfurDioxide = 1;
else M_TotalSulfurDioxide= 0;
label M_pH = "Imputation Indicator for pH";
if missing(pH) then M_pH = 1;
else M_pH= 0;
*------------------------------------------------------------*;
* TOOL: Transform;
* TYPE: MODIFY;
* NODE: Trans;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* Computed Code;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TRANSFORM: AcidIndex , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_AcidIndex = 'Transformed AcidIndex';
length OPT_AcidIndex $36;
if (AcidIndex eq .) then OPT_AcidIndex="01:low-7.5, MISSING";
else
if (AcidIndex < 7.5) then
OPT_AcidIndex = "01:low-7.5, MISSING";
else
if (AcidIndex >= 7.5 and AcidIndex < 8.5) then
OPT_AcidIndex = "02:7.5-8.5";
else
if (AcidIndex >= 8.5 and AcidIndex < 9.5) then
OPT_AcidIndex = "03:8.5-9.5";
else
if (AcidIndex >= 9.5) then
OPT_AcidIndex = "04:9.5-high";
*------------------------------------------------------------*;
* TRANSFORM: CitricAcid , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_CitricAcid = 'Transformed CitricAcid';
length OPT_CitricAcid $36;
if (CitricAcid eq .) then OPT_CitricAcid="04:0.385-high, MISSING";
else
if (CitricAcid < -0.095) then
OPT_CitricAcid = "01:low--0.095";
else
if (CitricAcid >= -0.095 and CitricAcid < 0.235) then
OPT_CitricAcid = "02:-0.095-0.235";
else
if (CitricAcid >= 0.235 and CitricAcid < 0.385) then
OPT_CitricAcid = "03:0.235-0.385";
else
if (CitricAcid >= 0.385) then
OPT_CitricAcid = "04:0.385-high, MISSING";
*------------------------------------------------------------*;
* TRANSFORM: Density , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_Density = 'Transformed Density';
length OPT_Density $36;
if (Density eq .) then OPT_Density="04:0.998085-high, MISSING";
else
if (Density < 0.98511) then
OPT_Density = "01:low-0.98511";
else
if (Density >= 0.98511 and Density < 0.99387) then
OPT_Density = "02:0.98511-0.99387";
else
if (Density >= 0.99387 and Density < 0.998085) then
OPT_Density = "03:0.99387-0.998085";
else
if (Density >= 0.998085) then
OPT_Density = "04:0.998085-high, MISSING";
*------------------------------------------------------------*;
* TRANSFORM: FixedAcidity , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_FixedAcidity = 'Transformed FixedAcidity';
length OPT_FixedAcidity $36;
if (FixedAcidity eq .) then OPT_FixedAcidity="01:low-8.15, MISSING";
else
if (FixedAcidity < 8.15) then
OPT_FixedAcidity = "01:low-8.15, MISSING";
else
if (FixedAcidity >= 8.15 and FixedAcidity < 10.45) then
OPT_FixedAcidity = "02:8.15-10.45";
else
if (FixedAcidity >= 10.45) then
OPT_FixedAcidity = "03:10.45-high";
*------------------------------------------------------------*;
* TRANSFORM: IMP_Alcohol , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_Alcohol = 'Transformed: Imputed Alcohol';
length OPT_IMP_Alcohol $36;
if (IMP_Alcohol eq .) then OPT_IMP_Alcohol="04:10.916667-high, MISSING";
else
if (IMP_Alcohol < 9.1833333333) then
OPT_IMP_Alcohol = "01:low-9.1833333";
else
if (IMP_Alcohol >= 9.1833333333 and IMP_Alcohol < 9.5166666667) then
OPT_IMP_Alcohol = "02:9.1833333-9.5166667";
else
if (IMP_Alcohol >= 9.5166666667 and IMP_Alcohol < 10.916666667) then
OPT_IMP_Alcohol = "03:9.5166667-10.916667";
else
if (IMP_Alcohol >= 10.916666667) then
OPT_IMP_Alcohol = "04:10.916667-high, MISSING";
*------------------------------------------------------------*;
* TRANSFORM: IMP_Chlorides , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_Chlorides = 'Transformed: Imputed Chlorides';
length OPT_IMP_Chlorides $36;
if (IMP_Chlorides eq .) then OPT_IMP_Chlorides="02:-0.0175-0.0595, MISSING";
else
if (IMP_Chlorides < -0.0175) then
OPT_IMP_Chlorides = "01:low--0.0175";
else
if (IMP_Chlorides >= -0.0175 and IMP_Chlorides < 0.0595) then
OPT_IMP_Chlorides = "02:-0.0175-0.0595, MISSING";
else
if (IMP_Chlorides >= 0.0595 and IMP_Chlorides < 0.1095) then
OPT_IMP_Chlorides = "03:0.0595-0.1095";
else
if (IMP_Chlorides >= 0.1095) then
OPT_IMP_Chlorides = "04:0.1095-high";
*------------------------------------------------------------*;
* TRANSFORM: IMP_FreeSulfurDioxide , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_FreeSulfurDioxide = 'Transformed: Imputed FreeSulfurDioxide';
length OPT_IMP_FreeSulfurDioxide $36;
if (IMP_FreeSulfurDioxide eq .) then OPT_IMP_FreeSulfurDioxide="04:18.5-high, MISSING";
else
if (IMP_FreeSulfurDioxide < -5.5) then
OPT_IMP_FreeSulfurDioxide = "01:low--5.5";
else
if (IMP_FreeSulfurDioxide >= -5.5 and IMP_FreeSulfurDioxide < 6.5) then
OPT_IMP_FreeSulfurDioxide = "02:-5.5-6.5";
else
if (IMP_FreeSulfurDioxide >= 6.5 and IMP_FreeSulfurDioxide < 18.5) then
OPT_IMP_FreeSulfurDioxide = "03:6.5-18.5";
else
if (IMP_FreeSulfurDioxide >= 18.5) then
OPT_IMP_FreeSulfurDioxide = "04:18.5-high, MISSING";
*------------------------------------------------------------*;
* TRANSFORM: IMP_ResidualSugar , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_ResidualSugar = 'Transformed: Imputed ResidualSugar';
length OPT_IMP_ResidualSugar $36;
if (IMP_ResidualSugar eq .) then OPT_IMP_ResidualSugar="03:4.05-43.15, MISSING";
else
if (IMP_ResidualSugar < 0.875) then
OPT_IMP_ResidualSugar = "01:low-0.875";
else
if (IMP_ResidualSugar >= 0.875 and IMP_ResidualSugar < 4.05) then
OPT_IMP_ResidualSugar = "02:0.875-4.05";
else
if (IMP_ResidualSugar >= 4.05 and IMP_ResidualSugar < 43.15) then
OPT_IMP_ResidualSugar = "03:4.05-43.15, MISSING";
else
if (IMP_ResidualSugar >= 43.15) then
OPT_IMP_ResidualSugar = "04:43.15-high";
*------------------------------------------------------------*;
* TRANSFORM: IMP_STARS , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_STARS = 'Transformed: Imputed STARS';
length OPT_IMP_STARS $36;
if (IMP_STARS eq .) then OPT_IMP_STARS="01:low-1.9955621, MISSING";
else
if (IMP_STARS < 1.9955621302) then
OPT_IMP_STARS = "01:low-1.9955621, MISSING";
else
if (IMP_STARS >= 1.9955621302 and IMP_STARS < 2.2439990624) then
OPT_IMP_STARS = "02:1.9955621-2.2439991";
else
if (IMP_STARS >= 2.2439990624 and IMP_STARS < 2.8542116631) then
OPT_IMP_STARS = "03:2.2439991-2.8542117";
else
if (IMP_STARS >= 2.8542116631) then
OPT_IMP_STARS = "04:2.8542117-high";
*------------------------------------------------------------*;
* TRANSFORM: IMP_Sulphates , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_Sulphates = 'Transformed: Imputed Sulphates';
length OPT_IMP_Sulphates $36;
if (IMP_Sulphates eq .) then OPT_IMP_Sulphates="02:0.505-high, MISSING";
else
if (IMP_Sulphates < 0.505) then
OPT_IMP_Sulphates = "01:low-0.505";
else
if (IMP_Sulphates >= 0.505) then
OPT_IMP_Sulphates = "02:0.505-high, MISSING";
*------------------------------------------------------------*;
* TRANSFORM: IMP_TotalSulfurDioxide , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_TotalSulfurDioxide = 'Transformed: Imputed TotalSulfurDioxide';
length OPT_IMP_TotalSulfurDioxide $36;
if (IMP_TotalSulfurDioxide eq .) then OPT_IMP_TotalSulfurDioxide="03:71.96281-172.25, MISSING";
else
if (IMP_TotalSulfurDioxide < -15.5) then
OPT_IMP_TotalSulfurDioxide = "01:low--15.5";
else
if (IMP_TotalSulfurDioxide >= -15.5 and IMP_TotalSulfurDioxide < 71.962809917) then
OPT_IMP_TotalSulfurDioxide = "02:-15.5-71.96281";
else
if (IMP_TotalSulfurDioxide >= 71.962809917 and IMP_TotalSulfurDioxide < 172.25) then
OPT_IMP_TotalSulfurDioxide = "03:71.96281-172.25, MISSING";
else
if (IMP_TotalSulfurDioxide >= 172.25) then
OPT_IMP_TotalSulfurDioxide = "04:172.25-high";
*------------------------------------------------------------*;
* TRANSFORM: IMP_pH , Optimal Binning(4);
*------------------------------------------------------------*;
label OPT_IMP_pH = 'Transformed: Imputed pH';
length OPT_IMP_pH $36;
if (IMP_pH eq .) then OPT_IMP_pH="03:3.155-high, MISSING";
else
if (IMP_pH < 2.895) then
OPT_IMP_pH = "01:low-2.895";
else
if (IMP_pH >= 2.895 and IMP_pH < 3.155) then
OPT_IMP_pH = "02:2.895-3.155";
else
if (IMP_pH >= 3.155) then
OPT_IMP_pH = "03:3.155-high, MISSING";
*------------------------------------------------------------*;
* TRANSFORM: VolatileAcidity , Optimal Binning(4);
*------------------------------------------------------------*;



label OPT_VolatileAcidity = 'Transformed VolatileAcidity';
length OPT_VolatileAcidity $36;
if (VolatileAcidity eq .) then OPT_VolatileAcidity="01:low-0.3425, MISSING";
else
if (VolatileAcidity < 0.3425) then
OPT_VolatileAcidity = "01:low-0.3425, MISSING";
else
if (VolatileAcidity >= 0.3425 and VolatileAcidity < 0.5675) then
OPT_VolatileAcidity = "02:0.3425-0.5675";
else
if (VolatileAcidity >= 0.5675 and VolatileAcidity < 0.6325) then
OPT_VolatileAcidity = "03:0.5675-0.6325";
else
if (VolatileAcidity >= 0.6325) then
OPT_VolatileAcidity = "04:0.6325-high";


run;

%mend;

*************************************************;
MACRO FOR POISSON MODEL
*************************************************;

%macro POISSON(INFILE, OUTFILE);

data &OUTFILE.;
set &INFILE.;


***********************************;
*** Begin Scoring Code for Neural;
***********************************;
DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
 _DM_BAD = 0;
 _NOCL_ = .;
 _MAX_ = .;
 _MAXP_ = .;
 _SUM_ = .;
 _NTRIALS = .;
 _EPS =                1E-10;
LENGTH _WARN_ $4
;
      label S_LabelAppeal = 'Standard: LabelAppeal' ;

      label M_Alcohol0 = 'Dummy: M_Alcohol=0' ;

      label M_Chlorides0 = 'Dummy: M_Chlorides=0' ;

      label M_FreeSulfurDioxide0 = 'Dummy: M_FreeSulfurDioxide=0' ;

      label M_ResidualSugar0 = 'Dummy: M_ResidualSugar=0' ;

      label M_STARS0 = 'Dummy: M_STARS=0' ;

      label M_Sulphates0 = 'Dummy: M_Sulphates=0' ;

      label M_TotalSulfurDioxide0 = 'Dummy: M_TotalSulfurDioxide=0' ;

      label M_pH0 = 'Dummy: M_pH=0' ;

      label OPT_AcidIndex01_low_7_5__MISSI =
'Dummy: OPT_AcidIndex=01:low-7.5, MISSING' ;

      label OPT_AcidIndex02_7_5_8_5 = 'Dummy: OPT_AcidIndex=02:7.5-8.5' ;

      label OPT_AcidIndex03_8_5_9_5 = 'Dummy: OPT_AcidIndex=03:8.5-9.5' ;

      label OPT_CitricAcid01_low__0_095 =
'Dummy: OPT_CitricAcid=01:low--0.095' ;

      label OPT_CitricAcid02__0_095_0_235 =
'Dummy: OPT_CitricAcid=02:-0.095-0.235' ;

      label OPT_CitricAcid03_0_235_0_385 =
'Dummy: OPT_CitricAcid=03:0.235-0.385' ;

      label OPT_Density01_low_0_98511 = 'Dummy: OPT_Density=01:low-0.98511' ;

      label OPT_Density02_0_98511_0_99387 =
'Dummy: OPT_Density=02:0.98511-0.99387' ;

      label OPT_Density03_0_99387_0_998085 =
'Dummy: OPT_Density=03:0.99387-0.998085' ;

      label OPT_FixedAcidit01_low_8_15__MI =
'Dummy: OPT_FixedAcidity=01:low-8.15, MISSING' ;

      label OPT_FixedAcidit02_8_15_10_45 =
'Dummy: OPT_FixedAcidity=02:8.15-10.45' ;

      label OPT_IMP_Alcohol01_low_9_183333 =
'Dummy: OPT_IMP_Alcohol=01:low-9.1833333' ;

      label OPT_IMP_Alcohol02_9_1833333_9_ =
'Dummy: OPT_IMP_Alcohol=02:9.1833333-9.5166667' ;

      label OPT_IMP_Alcohol03_9_5166667_10 =
'Dummy: OPT_IMP_Alcohol=03:9.5166667-10.916667' ;

      label OPT_IMP_Chlorid01_low__0_0175 =
'Dummy: OPT_IMP_Chlorides=01:low--0.0175' ;

      label OPT_IMP_Chlorid02__0_0175_0_05 =
'Dummy: OPT_IMP_Chlorides=02:-0.0175-0.0595, MISSING' ;

      label OPT_IMP_Chlorid03_0_0595_0_109 =
'Dummy: OPT_IMP_Chlorides=03:0.0595-0.1095' ;

      label OPT_IMP_FreeSul01_low__5_5 =
'Dummy: OPT_IMP_FreeSulfurDioxide=01:low--5.5' ;

      label OPT_IMP_FreeSul02__5_5_6_5 =
'Dummy: OPT_IMP_FreeSulfurDioxide=02:-5.5-6.5' ;

      label OPT_IMP_FreeSul03_6_5_18_5 =
'Dummy: OPT_IMP_FreeSulfurDioxide=03:6.5-18.5' ;

      label OPT_IMP_Residua01_low_0_875 =
'Dummy: OPT_IMP_ResidualSugar=01:low-0.875' ;

      label OPT_IMP_Residua02_0_875_4_05 =
'Dummy: OPT_IMP_ResidualSugar=02:0.875-4.05' ;

      label OPT_IMP_Residua03_4_05_43_15_ =
'Dummy: OPT_IMP_ResidualSugar=03:4.05-43.15, MISSING' ;

      label OPT_IMP_STARS01_low_1_9955621_ =
'Dummy: OPT_IMP_STARS=01:low-1.9955621, MISSING' ;

      label OPT_IMP_STARS02_1_9955621_2_24 =
'Dummy: OPT_IMP_STARS=02:1.9955621-2.2439991' ;

      label OPT_IMP_STARS03_2_2439991_2_85 =
'Dummy: OPT_IMP_STARS=03:2.2439991-2.8542117' ;

      label OPT_IMP_Sulphat01_low_0_505 =
'Dummy: OPT_IMP_Sulphates=01:low-0.505' ;

      label OPT_IMP_TotalSu01_low__15_5 =
'Dummy: OPT_IMP_TotalSulfurDioxide=01:low--15.5' ;

      label OPT_IMP_TotalSu02__15_5_71_962 =
'Dummy: OPT_IMP_TotalSulfurDioxide=02:-15.5-71.96281' ;

      label OPT_IMP_TotalSu03_71_96281_172 =
'Dummy: OPT_IMP_TotalSulfurDioxide=03:71.96281-172.25, MISSING' ;

      label OPT_IMP_pH01_low_2_895 = 'Dummy: OPT_IMP_pH=01:low-2.895' ;

      label OPT_IMP_pH02_2_895_3_155 = 'Dummy: OPT_IMP_pH=02:2.895-3.155' ;

      label OPT_VolatileAci01_low_0_3425_ =
'Dummy: OPT_VolatileAcidity=01:low-0.3425, MISSING' ;

      label OPT_VolatileAci02_0_3425_0_567 =
'Dummy: OPT_VolatileAcidity=02:0.3425-0.5675' ;

      label OPT_VolatileAci03_0_5675_0_632 =
'Dummy: OPT_VolatileAcidity=03:0.5675-0.6325' ;

      label H11 = 'Hidden: H1=1' ;

      label H12 = 'Hidden: H1=2' ;

      label H13 = 'Hidden: H1=3' ;

      label P_TARGET = 'Predicted: TARGET' ;

      label  _WARN_ = "Warnings";

*** Generate dummy variables for M_Alcohol ;
drop M_Alcohol0 ;
if missing( M_Alcohol ) then do;
   M_Alcohol0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_Alcohol , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_Alcohol0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_Alcohol0 = -1;
   end;
   else do;
      M_Alcohol0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_Chlorides ;
drop M_Chlorides0 ;
if missing( M_Chlorides ) then do;
   M_Chlorides0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_Chlorides , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_Chlorides0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_Chlorides0 = -1;
   end;
   else do;
      M_Chlorides0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_FreeSulfurDioxide ;
drop M_FreeSulfurDioxide0 ;
if missing( M_FreeSulfurDioxide ) then do;
   M_FreeSulfurDioxide0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_FreeSulfurDioxide , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_FreeSulfurDioxide0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_FreeSulfurDioxide0 = -1;
   end;
   else do;
      M_FreeSulfurDioxide0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_ResidualSugar ;
drop M_ResidualSugar0 ;
if missing( M_ResidualSugar ) then do;
   M_ResidualSugar0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_ResidualSugar , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_ResidualSugar0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_ResidualSugar0 = -1;
   end;
   else do;
      M_ResidualSugar0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_STARS ;
drop M_STARS0 ;
if missing( M_STARS ) then do;
   M_STARS0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_STARS , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_STARS0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_STARS0 = -1;
   end;
   else do;
      M_STARS0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_Sulphates ;
drop M_Sulphates0 ;
if missing( M_Sulphates ) then do;
   M_Sulphates0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_Sulphates , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_Sulphates0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_Sulphates0 = -1;
   end;
   else do;
      M_Sulphates0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_TotalSulfurDioxide ;
drop M_TotalSulfurDioxide0 ;
if missing( M_TotalSulfurDioxide ) then do;
   M_TotalSulfurDioxide0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_TotalSulfurDioxide , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_TotalSulfurDioxide0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_TotalSulfurDioxide0 = -1;
   end;
   else do;
      M_TotalSulfurDioxide0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_pH ;
drop M_pH0 ;
if missing( M_pH ) then do;
   M_pH0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_pH , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      M_pH0 = 1;
   end;
   else if _dm12 = '1'  then do;
      M_pH0 = -1;
   end;
   else do;
      M_pH0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_AcidIndex ;
drop OPT_AcidIndex01_low_7_5__MISSI OPT_AcidIndex02_7_5_8_5
        OPT_AcidIndex03_8_5_9_5 ;
if missing( OPT_AcidIndex ) then do;
   OPT_AcidIndex01_low_7_5__MISSI = .;
   OPT_AcidIndex02_7_5_8_5 = .;
   OPT_AcidIndex03_8_5_9_5 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_AcidIndex , _dm32 )
   if _dm32 = '01:LOW-7.5, MISSING'  then do;
      OPT_AcidIndex01_low_7_5__MISSI = 1;
      OPT_AcidIndex02_7_5_8_5 = 0;
      OPT_AcidIndex03_8_5_9_5 = 0;
   end;
   else if _dm32 = '02:7.5-8.5'  then do;
      OPT_AcidIndex01_low_7_5__MISSI = 0;
      OPT_AcidIndex02_7_5_8_5 = 1;
      OPT_AcidIndex03_8_5_9_5 = 0;
   end;
   else if _dm32 = '03:8.5-9.5'  then do;
      OPT_AcidIndex01_low_7_5__MISSI = 0;
      OPT_AcidIndex02_7_5_8_5 = 0;
      OPT_AcidIndex03_8_5_9_5 = 1;
   end;
   else if _dm32 = '04:9.5-HIGH'  then do;
      OPT_AcidIndex01_low_7_5__MISSI = -1;
      OPT_AcidIndex02_7_5_8_5 = -1;
      OPT_AcidIndex03_8_5_9_5 = -1;
   end;
   else do;
      OPT_AcidIndex01_low_7_5__MISSI = .;
      OPT_AcidIndex02_7_5_8_5 = .;
      OPT_AcidIndex03_8_5_9_5 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_CitricAcid ;
drop OPT_CitricAcid01_low__0_095 OPT_CitricAcid02__0_095_0_235
        OPT_CitricAcid03_0_235_0_385 ;
if missing( OPT_CitricAcid ) then do;
   OPT_CitricAcid01_low__0_095 = .;
   OPT_CitricAcid02__0_095_0_235 = .;
   OPT_CitricAcid03_0_235_0_385 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_CitricAcid , _dm32 )
   if _dm32 = '04:0.385-HIGH, MISSING'  then do;
      OPT_CitricAcid01_low__0_095 = -1;
      OPT_CitricAcid02__0_095_0_235 = -1;
      OPT_CitricAcid03_0_235_0_385 = -1;
   end;
   else if _dm32 = '03:0.235-0.385'  then do;
      OPT_CitricAcid01_low__0_095 = 0;
      OPT_CitricAcid02__0_095_0_235 = 0;
      OPT_CitricAcid03_0_235_0_385 = 1;
   end;
   else if _dm32 = '01:LOW--0.095'  then do;
      OPT_CitricAcid01_low__0_095 = 1;
      OPT_CitricAcid02__0_095_0_235 = 0;
      OPT_CitricAcid03_0_235_0_385 = 0;
   end;
   else if _dm32 = '02:-0.095-0.235'  then do;
      OPT_CitricAcid01_low__0_095 = 0;
      OPT_CitricAcid02__0_095_0_235 = 1;
      OPT_CitricAcid03_0_235_0_385 = 0;
   end;
   else do;
      OPT_CitricAcid01_low__0_095 = .;
      OPT_CitricAcid02__0_095_0_235 = .;
      OPT_CitricAcid03_0_235_0_385 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_Density ;
drop OPT_Density01_low_0_98511 OPT_Density02_0_98511_0_99387
        OPT_Density03_0_99387_0_998085 ;
if missing( OPT_Density ) then do;
   OPT_Density01_low_0_98511 = .;
   OPT_Density02_0_98511_0_99387 = .;
   OPT_Density03_0_99387_0_998085 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_Density , _dm32 )
   if _dm32 = '04:0.998085-HIGH, MISSING'  then do;
      OPT_Density01_low_0_98511 = -1;
      OPT_Density02_0_98511_0_99387 = -1;
      OPT_Density03_0_99387_0_998085 = -1;
   end;
   else if _dm32 = '01:LOW-0.98511'  then do;
      OPT_Density01_low_0_98511 = 1;
      OPT_Density02_0_98511_0_99387 = 0;
      OPT_Density03_0_99387_0_998085 = 0;
   end;
   else if _dm32 = '02:0.98511-0.99387'  then do;
      OPT_Density01_low_0_98511 = 0;
      OPT_Density02_0_98511_0_99387 = 1;
      OPT_Density03_0_99387_0_998085 = 0;
   end;
   else if _dm32 = '03:0.99387-0.998085'  then do;
      OPT_Density01_low_0_98511 = 0;
      OPT_Density02_0_98511_0_99387 = 0;
      OPT_Density03_0_99387_0_998085 = 1;
   end;
   else do;
      OPT_Density01_low_0_98511 = .;
      OPT_Density02_0_98511_0_99387 = .;
      OPT_Density03_0_99387_0_998085 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_FixedAcidity ;
drop OPT_FixedAcidit01_low_8_15__MI OPT_FixedAcidit02_8_15_10_45 ;
if missing( OPT_FixedAcidity ) then do;
   OPT_FixedAcidit01_low_8_15__MI = .;
   OPT_FixedAcidit02_8_15_10_45 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_FixedAcidity , _dm32 )
   if _dm32 = '01:LOW-8.15, MISSING'  then do;
      OPT_FixedAcidit01_low_8_15__MI = 1;
      OPT_FixedAcidit02_8_15_10_45 = 0;
   end;
   else if _dm32 = '03:10.45-HIGH'  then do;
      OPT_FixedAcidit01_low_8_15__MI = -1;
      OPT_FixedAcidit02_8_15_10_45 = -1;
   end;
   else if _dm32 = '02:8.15-10.45'  then do;
      OPT_FixedAcidit01_low_8_15__MI = 0;
      OPT_FixedAcidit02_8_15_10_45 = 1;
   end;
   else do;
      OPT_FixedAcidit01_low_8_15__MI = .;
      OPT_FixedAcidit02_8_15_10_45 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_Alcohol ;
drop OPT_IMP_Alcohol01_low_9_183333 OPT_IMP_Alcohol02_9_1833333_9_
        OPT_IMP_Alcohol03_9_5166667_10 ;
if missing( OPT_IMP_Alcohol ) then do;
   OPT_IMP_Alcohol01_low_9_183333 = .;
   OPT_IMP_Alcohol02_9_1833333_9_ = .;
   OPT_IMP_Alcohol03_9_5166667_10 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_Alcohol , _dm32 )
   if _dm32 = '04:10.916667-HIGH, MISSING'  then do;
      OPT_IMP_Alcohol01_low_9_183333 = -1;
      OPT_IMP_Alcohol02_9_1833333_9_ = -1;
      OPT_IMP_Alcohol03_9_5166667_10 = -1;
   end;
   else if _dm32 = '01:LOW-9.1833333'  then do;
      OPT_IMP_Alcohol01_low_9_183333 = 1;
      OPT_IMP_Alcohol02_9_1833333_9_ = 0;
      OPT_IMP_Alcohol03_9_5166667_10 = 0;
   end;
   else if _dm32 = '03:9.5166667-10.916667'  then do;
      OPT_IMP_Alcohol01_low_9_183333 = 0;
      OPT_IMP_Alcohol02_9_1833333_9_ = 0;
      OPT_IMP_Alcohol03_9_5166667_10 = 1;
   end;
   else if _dm32 = '02:9.1833333-9.5166667'  then do;
      OPT_IMP_Alcohol01_low_9_183333 = 0;
      OPT_IMP_Alcohol02_9_1833333_9_ = 1;
      OPT_IMP_Alcohol03_9_5166667_10 = 0;
   end;
   else do;
      OPT_IMP_Alcohol01_low_9_183333 = .;
      OPT_IMP_Alcohol02_9_1833333_9_ = .;
      OPT_IMP_Alcohol03_9_5166667_10 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_Chlorides ;
drop OPT_IMP_Chlorid01_low__0_0175 OPT_IMP_Chlorid02__0_0175_0_05
        OPT_IMP_Chlorid03_0_0595_0_109 ;
if missing( OPT_IMP_Chlorides ) then do;
   OPT_IMP_Chlorid01_low__0_0175 = .;
   OPT_IMP_Chlorid02__0_0175_0_05 = .;
   OPT_IMP_Chlorid03_0_0595_0_109 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_Chlorides , _dm32 )
   if _dm32 = '02:-0.0175-0.0595, MISSING'  then do;
      OPT_IMP_Chlorid01_low__0_0175 = 0;
      OPT_IMP_Chlorid02__0_0175_0_05 = 1;
      OPT_IMP_Chlorid03_0_0595_0_109 = 0;
   end;
   else if _dm32 = '04:0.1095-HIGH'  then do;
      OPT_IMP_Chlorid01_low__0_0175 = -1;
      OPT_IMP_Chlorid02__0_0175_0_05 = -1;
      OPT_IMP_Chlorid03_0_0595_0_109 = -1;
   end;
   else if _dm32 = '01:LOW--0.0175'  then do;
      OPT_IMP_Chlorid01_low__0_0175 = 1;
      OPT_IMP_Chlorid02__0_0175_0_05 = 0;
      OPT_IMP_Chlorid03_0_0595_0_109 = 0;
   end;
   else if _dm32 = '03:0.0595-0.1095'  then do;
      OPT_IMP_Chlorid01_low__0_0175 = 0;
      OPT_IMP_Chlorid02__0_0175_0_05 = 0;
      OPT_IMP_Chlorid03_0_0595_0_109 = 1;
   end;
   else do;
      OPT_IMP_Chlorid01_low__0_0175 = .;
      OPT_IMP_Chlorid02__0_0175_0_05 = .;
      OPT_IMP_Chlorid03_0_0595_0_109 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_FreeSulfurDioxide ;
drop OPT_IMP_FreeSul01_low__5_5 OPT_IMP_FreeSul02__5_5_6_5
        OPT_IMP_FreeSul03_6_5_18_5 ;
if missing( OPT_IMP_FreeSulfurDioxide ) then do;
   OPT_IMP_FreeSul01_low__5_5 = .;
   OPT_IMP_FreeSul02__5_5_6_5 = .;
   OPT_IMP_FreeSul03_6_5_18_5 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_FreeSulfurDioxide , _dm32 )
   if _dm32 = '04:18.5-HIGH, MISSING'  then do;
      OPT_IMP_FreeSul01_low__5_5 = -1;
      OPT_IMP_FreeSul02__5_5_6_5 = -1;
      OPT_IMP_FreeSul03_6_5_18_5 = -1;
   end;
   else if _dm32 = '01:LOW--5.5'  then do;
      OPT_IMP_FreeSul01_low__5_5 = 1;
      OPT_IMP_FreeSul02__5_5_6_5 = 0;
      OPT_IMP_FreeSul03_6_5_18_5 = 0;
   end;
   else if _dm32 = '03:6.5-18.5'  then do;
      OPT_IMP_FreeSul01_low__5_5 = 0;
      OPT_IMP_FreeSul02__5_5_6_5 = 0;
      OPT_IMP_FreeSul03_6_5_18_5 = 1;
   end;
   else if _dm32 = '02:-5.5-6.5'  then do;
      OPT_IMP_FreeSul01_low__5_5 = 0;
      OPT_IMP_FreeSul02__5_5_6_5 = 1;
      OPT_IMP_FreeSul03_6_5_18_5 = 0;
   end;
   else do;
      OPT_IMP_FreeSul01_low__5_5 = .;
      OPT_IMP_FreeSul02__5_5_6_5 = .;
      OPT_IMP_FreeSul03_6_5_18_5 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_ResidualSugar ;
drop OPT_IMP_Residua01_low_0_875 OPT_IMP_Residua02_0_875_4_05
        OPT_IMP_Residua03_4_05_43_15_ ;
if missing( OPT_IMP_ResidualSugar ) then do;
   OPT_IMP_Residua01_low_0_875 = .;
   OPT_IMP_Residua02_0_875_4_05 = .;
   OPT_IMP_Residua03_4_05_43_15_ = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_ResidualSugar , _dm32 )
   if _dm32 = '03:4.05-43.15, MISSING'  then do;
      OPT_IMP_Residua01_low_0_875 = 0;
      OPT_IMP_Residua02_0_875_4_05 = 0;
      OPT_IMP_Residua03_4_05_43_15_ = 1;
   end;
   else if _dm32 = '02:0.875-4.05'  then do;
      OPT_IMP_Residua01_low_0_875 = 0;
      OPT_IMP_Residua02_0_875_4_05 = 1;
      OPT_IMP_Residua03_4_05_43_15_ = 0;
   end;
   else if _dm32 = '01:LOW-0.875'  then do;
      OPT_IMP_Residua01_low_0_875 = 1;
      OPT_IMP_Residua02_0_875_4_05 = 0;
      OPT_IMP_Residua03_4_05_43_15_ = 0;
   end;
   else if _dm32 = '04:43.15-HIGH'  then do;
      OPT_IMP_Residua01_low_0_875 = -1;
      OPT_IMP_Residua02_0_875_4_05 = -1;
      OPT_IMP_Residua03_4_05_43_15_ = -1;
   end;
   else do;
      OPT_IMP_Residua01_low_0_875 = .;
      OPT_IMP_Residua02_0_875_4_05 = .;
      OPT_IMP_Residua03_4_05_43_15_ = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_STARS ;
drop OPT_IMP_STARS01_low_1_9955621_ OPT_IMP_STARS02_1_9955621_2_24
        OPT_IMP_STARS03_2_2439991_2_85 ;
if missing( OPT_IMP_STARS ) then do;
   OPT_IMP_STARS01_low_1_9955621_ = .;
   OPT_IMP_STARS02_1_9955621_2_24 = .;
   OPT_IMP_STARS03_2_2439991_2_85 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_STARS , _dm32 )
   if _dm32 = '01:LOW-1.9955621, MISSING'  then do;
      OPT_IMP_STARS01_low_1_9955621_ = 1;
      OPT_IMP_STARS02_1_9955621_2_24 = 0;
      OPT_IMP_STARS03_2_2439991_2_85 = 0;
   end;
   else if _dm32 = '02:1.9955621-2.2439991'  then do;
      OPT_IMP_STARS01_low_1_9955621_ = 0;
      OPT_IMP_STARS02_1_9955621_2_24 = 1;
      OPT_IMP_STARS03_2_2439991_2_85 = 0;
   end;
   else if _dm32 = '04:2.8542117-HIGH'  then do;
      OPT_IMP_STARS01_low_1_9955621_ = -1;
      OPT_IMP_STARS02_1_9955621_2_24 = -1;
      OPT_IMP_STARS03_2_2439991_2_85 = -1;
   end;
   else if _dm32 = '03:2.2439991-2.8542117'  then do;
      OPT_IMP_STARS01_low_1_9955621_ = 0;
      OPT_IMP_STARS02_1_9955621_2_24 = 0;
      OPT_IMP_STARS03_2_2439991_2_85 = 1;
   end;
   else do;
      OPT_IMP_STARS01_low_1_9955621_ = .;
      OPT_IMP_STARS02_1_9955621_2_24 = .;
      OPT_IMP_STARS03_2_2439991_2_85 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_Sulphates ;
drop OPT_IMP_Sulphat01_low_0_505 ;
if missing( OPT_IMP_Sulphates ) then do;
   OPT_IMP_Sulphat01_low_0_505 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_Sulphates , _dm32 )
   if _dm32 = '02:0.505-HIGH, MISSING'  then do;
      OPT_IMP_Sulphat01_low_0_505 = -1;
   end;
   else if _dm32 = '01:LOW-0.505'  then do;
      OPT_IMP_Sulphat01_low_0_505 = 1;
   end;
   else do;
      OPT_IMP_Sulphat01_low_0_505 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_TotalSulfurDioxide ;
drop OPT_IMP_TotalSu01_low__15_5 OPT_IMP_TotalSu02__15_5_71_962
        OPT_IMP_TotalSu03_71_96281_172 ;
if missing( OPT_IMP_TotalSulfurDioxide ) then do;
   OPT_IMP_TotalSu01_low__15_5 = .;
   OPT_IMP_TotalSu02__15_5_71_962 = .;
   OPT_IMP_TotalSu03_71_96281_172 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_TotalSulfurDioxide , _dm32 )
   if _dm32 = '03:71.96281-172.25, MISSING'  then do;
      OPT_IMP_TotalSu01_low__15_5 = 0;
      OPT_IMP_TotalSu02__15_5_71_962 = 0;
      OPT_IMP_TotalSu03_71_96281_172 = 1;
   end;
   else if _dm32 = '04:172.25-HIGH'  then do;
      OPT_IMP_TotalSu01_low__15_5 = -1;
      OPT_IMP_TotalSu02__15_5_71_962 = -1;
      OPT_IMP_TotalSu03_71_96281_172 = -1;
   end;
   else if _dm32 = '01:LOW--15.5'  then do;
      OPT_IMP_TotalSu01_low__15_5 = 1;
      OPT_IMP_TotalSu02__15_5_71_962 = 0;
      OPT_IMP_TotalSu03_71_96281_172 = 0;
   end;
   else if _dm32 = '02:-15.5-71.96281'  then do;
      OPT_IMP_TotalSu01_low__15_5 = 0;
      OPT_IMP_TotalSu02__15_5_71_962 = 1;
      OPT_IMP_TotalSu03_71_96281_172 = 0;
   end;
   else do;
      OPT_IMP_TotalSu01_low__15_5 = .;
      OPT_IMP_TotalSu02__15_5_71_962 = .;
      OPT_IMP_TotalSu03_71_96281_172 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_IMP_pH ;
drop OPT_IMP_pH01_low_2_895 OPT_IMP_pH02_2_895_3_155 ;
if missing( OPT_IMP_pH ) then do;
   OPT_IMP_pH01_low_2_895 = .;
   OPT_IMP_pH02_2_895_3_155 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_IMP_pH , _dm32 )
   if _dm32 = '03:3.155-HIGH, MISSING'  then do;
      OPT_IMP_pH01_low_2_895 = -1;
      OPT_IMP_pH02_2_895_3_155 = -1;
   end;
   else if _dm32 = '01:LOW-2.895'  then do;
      OPT_IMP_pH01_low_2_895 = 1;
      OPT_IMP_pH02_2_895_3_155 = 0;
   end;
   else if _dm32 = '02:2.895-3.155'  then do;
      OPT_IMP_pH01_low_2_895 = 0;
      OPT_IMP_pH02_2_895_3_155 = 1;
   end;
   else do;
      OPT_IMP_pH01_low_2_895 = .;
      OPT_IMP_pH02_2_895_3_155 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OPT_VolatileAcidity ;
drop OPT_VolatileAci01_low_0_3425_ OPT_VolatileAci02_0_3425_0_567
        OPT_VolatileAci03_0_5675_0_632 ;
if missing( OPT_VolatileAcidity ) then do;
   OPT_VolatileAci01_low_0_3425_ = .;
   OPT_VolatileAci02_0_3425_0_567 = .;
   OPT_VolatileAci03_0_5675_0_632 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( OPT_VolatileAcidity , _dm32 )
   if _dm32 = '01:LOW-0.3425, MISSING'  then do;
      OPT_VolatileAci01_low_0_3425_ = 1;
      OPT_VolatileAci02_0_3425_0_567 = 0;
      OPT_VolatileAci03_0_5675_0_632 = 0;
   end;
   else if _dm32 = '04:0.6325-HIGH'  then do;
      OPT_VolatileAci01_low_0_3425_ = -1;
      OPT_VolatileAci02_0_3425_0_567 = -1;
      OPT_VolatileAci03_0_5675_0_632 = -1;
   end;
   else if _dm32 = '02:0.3425-0.5675'  then do;
      OPT_VolatileAci01_low_0_3425_ = 0;
      OPT_VolatileAci02_0_3425_0_567 = 1;
      OPT_VolatileAci03_0_5675_0_632 = 0;
   end;
   else if _dm32 = '03:0.5675-0.6325'  then do;
      OPT_VolatileAci01_low_0_3425_ = 0;
      OPT_VolatileAci02_0_3425_0_567 = 0;
      OPT_VolatileAci03_0_5675_0_632 = 1;
   end;
   else do;
      OPT_VolatileAci01_low_0_3425_ = .;
      OPT_VolatileAci02_0_3425_0_567 = .;
      OPT_VolatileAci03_0_5675_0_632 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** *************************;
*** Checking missing input Interval
*** *************************;

IF NMISS(
   LabelAppeal   ) THEN DO;
   SUBSTR(_WARN_, 1, 1) = 'M';

   _DM_BAD = 1;
END;
*** *************************;
*** Writing the Node intvl ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   S_LabelAppeal  =     0.01367946501366 +     1.12410062502195 * LabelAppeal
         ;
END;
ELSE DO;
   IF MISSING( LabelAppeal ) THEN S_LabelAppeal  = . ;
   ELSE S_LabelAppeal  =     0.01367946501366 +     1.12410062502195 *
        LabelAppeal ;
END;
*** *************************;
*** Writing the Node bin ;
*** *************************;
*** *************************;
*** Writing the Node nom ;
*** *************************;
*** *************************;
*** Writing the Node H1 ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H11  =    -0.15790955440785 * S_LabelAppeal ;
   H12  =    -0.27708371380325 * S_LabelAppeal ;
   H13  =     0.09971311528794 * S_LabelAppeal ;
   H11  = H11  +     0.07120493715733 * M_Alcohol0  +     0.13637358395451 *
        M_Chlorides0  +     0.02205065593559 * M_FreeSulfurDioxide0
          +     0.24058251104031 * M_ResidualSugar0  +     0.63810587255398 *
        M_STARS0  +     0.07217041549334 * M_Sulphates0
          +     0.04428132568863 * M_TotalSulfurDioxide0
          +         0.0876221878 * M_pH0 ;
   H12  = H12  +      0.0016639666511 * M_Alcohol0  +    -0.03003896233141 *
        M_Chlorides0  +    -0.00774545774981 * M_FreeSulfurDioxide0
          +     0.00087184153439 * M_ResidualSugar0  +    -0.83801377603218 *
        M_STARS0  +    -0.00938528095342 * M_Sulphates0
          +    -0.00497842093777 * M_TotalSulfurDioxide0
          +    -0.01934024075483 * M_pH0 ;
   H13  = H13  +     0.02213856655668 * M_Alcohol0  +     0.01022271837499 *
        M_Chlorides0  +     -0.0527245235063 * M_FreeSulfurDioxide0
          +    -0.05518241690753 * M_ResidualSugar0  +    -0.45673862027816 *
        M_STARS0  +    -0.13098669666366 * M_Sulphates0
          +     0.00817351007507 * M_TotalSulfurDioxide0
          +     0.10281987416938 * M_pH0 ;
   H11  = H11  +    -0.15961845791324 * OPT_AcidIndex01_low_7_5__MISSI
          +    -0.30804821050054 * OPT_AcidIndex02_7_5_8_5
          +     0.29944657295327 * OPT_AcidIndex03_8_5_9_5
          +    -0.17012348122644 * OPT_CitricAcid01_low__0_095
          +     0.16276610271681 * OPT_CitricAcid02__0_095_0_235
          +     0.07888508957858 * OPT_CitricAcid03_0_235_0_385
          +    -0.00381779700088 * OPT_Density01_low_0_98511
          +    -0.29475574403716 * OPT_Density02_0_98511_0_99387
          +     0.13758911925813 * OPT_Density03_0_99387_0_998085
          +    -0.22892677990459 * OPT_FixedAcidit01_low_8_15__MI
          +     0.00579986385653 * OPT_FixedAcidit02_8_15_10_45
          +     0.10539676154397 * OPT_IMP_Alcohol01_low_9_183333
          +    -0.00421998544635 * OPT_IMP_Alcohol02_9_1833333_9_
          +     0.13060984442541 * OPT_IMP_Alcohol03_9_5166667_10
          +    -0.12859119068435 * OPT_IMP_Chlorid01_low__0_0175
          +     0.18947956743383 * OPT_IMP_Chlorid02__0_0175_0_05
          +     0.03545139124931 * OPT_IMP_Chlorid03_0_0595_0_109
          +     0.00387523257677 * OPT_IMP_FreeSul01_low__5_5
          +     0.28196637715877 * OPT_IMP_FreeSul02__5_5_6_5
          +     0.30165969107216 * OPT_IMP_FreeSul03_6_5_18_5
          +     -0.0396857675856 * OPT_IMP_Residua01_low_0_875
          +    -0.41281163248959 * OPT_IMP_Residua02_0_875_4_05
          +     -0.1185155957663 * OPT_IMP_Residua03_4_05_43_15_
          +    -0.53501678410126 * OPT_IMP_STARS01_low_1_9955621_
          +     0.09293638005012 * OPT_IMP_STARS02_1_9955621_2_24
          +    -0.16071348555838 * OPT_IMP_STARS03_2_2439991_2_85
          +     -0.0149418839931 * OPT_IMP_Sulphat01_low_0_505
          +    -0.22929585939846 * OPT_IMP_TotalSu01_low__15_5
          +     0.14068827719425 * OPT_IMP_TotalSu02__15_5_71_962
          +     0.10228634184642 * OPT_IMP_TotalSu03_71_96281_172
          +    -0.16829330746505 * OPT_IMP_pH01_low_2_895
          +     0.12640774643005 * OPT_IMP_pH02_2_895_3_155
          +    -0.04542719202776 * OPT_VolatileAci01_low_0_3425_
          +      0.2340466771095 * OPT_VolatileAci02_0_3425_0_567
          +    -0.04128124624112 * OPT_VolatileAci03_0_5675_0_632 ;
   H12  = H12  +    -0.05621934101222 * OPT_AcidIndex01_low_7_5__MISSI
          +    -0.00188359333086 * OPT_AcidIndex02_7_5_8_5
          +     0.00663539585012 * OPT_AcidIndex03_8_5_9_5
          +    -0.00296504046175 * OPT_CitricAcid01_low__0_095
          +     0.05070676864984 * OPT_CitricAcid02__0_095_0_235
          +    -0.04869442132381 * OPT_CitricAcid03_0_235_0_385
          +    -0.00905595744398 * OPT_Density01_low_0_98511
          +    -0.03372832192435 * OPT_Density02_0_98511_0_99387
          +     0.03168229611737 * OPT_Density03_0_99387_0_998085
          +     0.01640260111816 * OPT_FixedAcidit01_low_8_15__MI
          +     0.00389318681609 * OPT_FixedAcidit02_8_15_10_45
          +     0.01115412619066 * OPT_IMP_Alcohol01_low_9_183333
          +     0.08319706566333 * OPT_IMP_Alcohol02_9_1833333_9_
          +    -0.01181336513285 * OPT_IMP_Alcohol03_9_5166667_10
          +    -0.02431562478046 * OPT_IMP_Chlorid01_low__0_0175
          +    -0.03277739838217 * OPT_IMP_Chlorid02__0_0175_0_05
          +     0.05111895785053 * OPT_IMP_Chlorid03_0_0595_0_109
          +    -0.01559694176906 * OPT_IMP_FreeSul01_low__5_5
          +     0.04827380323262 * OPT_IMP_FreeSul02__5_5_6_5
          +     0.01292230650147 * OPT_IMP_FreeSul03_6_5_18_5
          +    -0.00116222073791 * OPT_IMP_Residua01_low_0_875
          +     0.00537791171887 * OPT_IMP_Residua02_0_875_4_05
          +     0.00344185186656 * OPT_IMP_Residua03_4_05_43_15_
          +     0.30906730133913 * OPT_IMP_STARS01_low_1_9955621_
          +    -0.00932898123376 * OPT_IMP_STARS02_1_9955621_2_24
          +    -0.08094850192811 * OPT_IMP_STARS03_2_2439991_2_85
          +     0.01692536861112 * OPT_IMP_Sulphat01_low_0_505
          +    -0.02325427457573 * OPT_IMP_TotalSu01_low__15_5
          +     0.00724729834702 * OPT_IMP_TotalSu02__15_5_71_962
          +    -0.00929555925951 * OPT_IMP_TotalSu03_71_96281_172
          +      0.0386320039292 * OPT_IMP_pH01_low_2_895
          +    -0.02600816895667 * OPT_IMP_pH02_2_895_3_155
          +    -0.07042391550823 * OPT_VolatileAci01_low_0_3425_
          +    -0.04643759622344 * OPT_VolatileAci02_0_3425_0_567
          +     0.15821781453401 * OPT_VolatileAci03_0_5675_0_632 ;
   H13  = H13  +    -0.29938707935518 * OPT_AcidIndex01_low_7_5__MISSI
          +     -0.0853092046083 * OPT_AcidIndex02_7_5_8_5
          +    -0.01918324654173 * OPT_AcidIndex03_8_5_9_5
          +    -0.01002271243034 * OPT_CitricAcid01_low__0_095
          +      0.1398467031755 * OPT_CitricAcid02__0_095_0_235
          +    -0.09220802949213 * OPT_CitricAcid03_0_235_0_385
          +    -0.07632324938977 * OPT_Density01_low_0_98511
          +    -0.03989368388173 * OPT_Density02_0_98511_0_99387
          +     0.16807551788092 * OPT_Density03_0_99387_0_998085
          +     0.03921647695427 * OPT_FixedAcidit01_low_8_15__MI
          +    -0.05355361868448 * OPT_FixedAcidit02_8_15_10_45
          +    -0.14418276390627 * OPT_IMP_Alcohol01_low_9_183333
          +     0.10263551228549 * OPT_IMP_Alcohol02_9_1833333_9_
          +    -0.02855077746128 * OPT_IMP_Alcohol03_9_5166667_10
          +     0.05085644298592 * OPT_IMP_Chlorid01_low__0_0175
          +     -0.5035324734208 * OPT_IMP_Chlorid02__0_0175_0_05
          +     0.30868616546174 * OPT_IMP_Chlorid03_0_0595_0_109
          +     -0.2182288169582 * OPT_IMP_FreeSul01_low__5_5
          +     0.25463103067205 * OPT_IMP_FreeSul02__5_5_6_5
          +     0.06733507599176 * OPT_IMP_FreeSul03_6_5_18_5
          +     -0.0258283169993 * OPT_IMP_Residua01_low_0_875
          +     0.26969498726708 * OPT_IMP_Residua02_0_875_4_05
          +    -0.13645197998935 * OPT_IMP_Residua03_4_05_43_15_
          +     0.79128987868606 * OPT_IMP_STARS01_low_1_9955621_
          +    -0.47992995510331 * OPT_IMP_STARS02_1_9955621_2_24
          +     0.97083828811816 * OPT_IMP_STARS03_2_2439991_2_85
          +    -0.10059262729369 * OPT_IMP_Sulphat01_low_0_505
          +      0.2645926510825 * OPT_IMP_TotalSu01_low__15_5
          +     0.25764151186885 * OPT_IMP_TotalSu02__15_5_71_962
          +    -0.28062707328876 * OPT_IMP_TotalSu03_71_96281_172
          +     0.10877266962668 * OPT_IMP_pH01_low_2_895
          +    -0.26208827693478 * OPT_IMP_pH02_2_895_3_155
          +     -0.2311265839813 * OPT_VolatileAci01_low_0_3425_
          +    -0.00862853482141 * OPT_VolatileAci02_0_3425_0_567
          +     0.10713514694726 * OPT_VolatileAci03_0_5675_0_632 ;
   H11  =     2.12766805736431 + H11 ;
   H12  =      0.8387674009592 + H12 ;
   H13  =    -1.65164042434681 + H13 ;
   H11  = TANH(H11 );
   H12  = TANH(H12 );
   H13  = TANH(H13 );
END;
ELSE DO;
   H11  = .;
   H12  = .;
   H13  = .;
END;
*** *************************;
*** Writing the Node intervalTargets ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   P_TARGET  =    -0.69786974693466 * H11  +    -0.75281172095775 * H12
          +    -1.27290832236804 * H13 ;
   P_TARGET  =     0.57212901142316 + P_TARGET ;
   DROP _EXP_BAR;
   _EXP_BAR=50;
   P_TARGET  = EXP(MIN(P_TARGET , _EXP_BAR));
END;
ELSE DO;
   P_TARGET  = .;
END;
IF _DM_BAD EQ 1 THEN DO;
   P_TARGET  =     3.03594953667522;
END;
********************************;
*** End Scoring Code for Neural;
********************************;
drop
H11
H12
H13
;
drop S_:;
*------------------------------------------------------------*;
* TOOL: Score Node;
* TYPE: ASSESS;
* NODE: Score;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* Score: Creating Fixed Names;
*------------------------------------------------------------*;
LABEL EM_PREDICTION= "Prediction for TARGET";
EM_PREDICTION = P_TARGET;



run;

%mend;

*************************************************;
MACRO FOR NEGATIVE BINOMIAL MODEL
*************************************************;

%macro NEGATIVE_BINOMIAL(INFILE, OUTFILE);

data &OUTFILE.;
set &INFILE.;

length _WARN_ $4;
label _WARN_ = 'Warning' ;
_WARN_ = '';
drop _LMR_IMPUTE;
_LMR_IMPUTE = 0;
label P_TARGET = 'Predicted: TARGET' ;
label R_TARGET = 'Residual: TARGET' ;
drop _Y;
_Y = TARGET ;
drop _LMR_BAD;
_LMR_BAD=0;

*** Check interval variables for missing values;
if nmiss(AcidIndex,IMP_Alcohol,IMP_STARS,LabelAppeal,VolatileAcidity) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;

*** Generate design variables for M_STARS;
drop _0_0 _0_1 ;
_0_0= 0;
_0_1= 0;
if missing( M_STARS ) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;
else do;
   length _st12 $ 12; drop _st12;
   _st12 = put(M_STARS, BEST12.);
   call dmnorm(_st12, 12);
   if _st12 = '1'  then do;
      _0_0 = 1;
   end;
   else if _st12 = '0'  then do;
      _0_1 = 1;
   end;
   else do;
      _0_0 = .;
      _0_1 = .;
      substr(_warn_,2,1) = 'U';
      _LMR_IMPUTE = 1;
   end;
end;

*** If missing or invalid inputs, use averages;
if _LMR_IMPUTE > 0 then do;
   _LP0 = 3.03594953667522;
   goto HPGLM4SKIP_000;
end;

*** Compute Linear Predictors;
drop _LP0;
_LP0 = 0;

*** Effect: AcidIndex;
_LP0 = _LP0 + (-0.08050292863218) * AcidIndex;
*** Effect: IMP_Alcohol;
_LP0 = _LP0 + (0.00477005373941) * IMP_Alcohol;
*** Effect: IMP_STARS;
_LP0 = _LP0 + (0.17720087935701) * IMP_STARS;
*** Effect: LabelAppeal;
_LP0 = _LP0 + (0.15413215418228) * LabelAppeal;
*** Effect: VolatileAcidity;
_LP0 = _LP0 + (-0.02899008250288) * VolatileAcidity;
*** Effect: M_STARS;
_LP0 = _LP0 + (-1.00582246756444) * _0_0;

*** Predicted values;
_LP0 = _LP0 +                 1.47347072937239;
_LP0 = exp(_LP0);
HPGLM4SKIP_000:
P_TARGET = _LP0;
drop _R;
if (_Y = .) then do;
   R_TARGET = .;
end;
else do;
   _R = _Y - _LP0;
   R_TARGET = _R;
end;
EM_PREDICTION = P_TARGET;
label EM_PREDICTION = 'Prediction for TARGET';


run;

%mend;

*************************************************;
MACRO FOR ZERO_INFLATED POISSON MODEL
*************************************************;

%macro ZERO_INF_POISSON(INFILE, OUTFILE);

data &OUTFILE.;
set &INFILE.;


length _WARN_ $4;
label _WARN_ = 'Warning' ;
_WARN_ = '';
drop _LMR_IMPUTE;
_LMR_IMPUTE = 0;
label pZero = 'Zero Inflation Probability';
label P_TARGET = 'Predicted: TARGET' ;
drop _LMR_BAD;
_LMR_BAD=0;

*** Check interval variables for missing values;
if nmiss(AcidIndex,IMP_Alcohol,IMP_STARS,LabelAppeal,VolatileAcidity,
        AcidIndex,IMP_Alcohol,IMP_STARS,LabelAppeal,VolatileAcidity) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;

*** Generate design variables for M_STARS;
drop _0_0 _0_1 ;
_0_0= 0;
_0_1= 0;
if missing( M_STARS ) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;
else do;
   length _st12 $ 12; drop _st12;
   _st12 = put(M_STARS, BEST12.);
   call dmnorm(_st12, 12);
   if _st12 = '1'  then do;
      _0_0 = 1;
   end;
   else if _st12 = '0'  then do;
      _0_1 = 1;
   end;
   else do;
      _0_0 = .;
      _0_1 = .;
      substr(_warn_,2,1) = 'U';
      _LMR_IMPUTE = 1;
   end;
end;

*** Generate design variables for M_STARS;
drop _z0_0 _z0_1 ;
_z0_0= 0;
_z0_1= 0;
if missing( M_STARS ) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;
else do;
   length _st12 $ 12; drop _st12;
   _st12 = put(M_STARS, BEST12.);
   call dmnorm(_st12, 12);
   if _st12 = '1'  then do;
      _z0_0 = 1;
   end;
   else if _st12 = '0'  then do;
      _z0_1 = 1;
   end;
   else do;
      _z0_0 = .;
      _z0_1 = .;
      substr(_warn_,2,1) = 'U';
      _LMR_IMPUTE = 1;
   end;
end;

*** If missing or invalid inputs, use averages;
if _LMR_IMPUTE > 0 then do;
   _LP0 = 3.03594953667522;
   goto HPGLM3SKIP_000;
end;

*** Compute Linear Predictors;
drop _LP0;
_LP0 = 0;

*** Effect: AcidIndex;
_LP0 = _LP0 + (-0.02014891570386) * AcidIndex;
*** Effect: IMP_Alcohol;
_LP0 = _LP0 + (0.0072213818692) * IMP_Alcohol;
*** Effect: IMP_STARS;
_LP0 = _LP0 + (0.11227021929221) * IMP_STARS;
*** Effect: LabelAppeal;
_LP0 = _LP0 + (0.23130509957072) * LabelAppeal;
*** Effect: VolatileAcidity;
_LP0 = _LP0 + (-0.01388512400227) * VolatileAcidity;
*** Effect: M_STARS;
_LP0 = _LP0 + (-0.16064894719373) * _0_0;
drop _zLP0;
_zLP0 = (-3.53145674264764);
*** Effect: AcidIndex;
_zLP0 = _zLP0 + (0.42179932696811) * AcidIndex;
*** Effect: IMP_Alcohol;
_zLP0 = _zLP0 + (0.03596875193527) * IMP_Alcohol;
*** Effect: IMP_STARS;
_zLP0 = _zLP0 + (-2.34201033799894) * IMP_STARS;
*** Effect: LabelAppeal;
_zLP0 = _zLP0 + (1.32490431020011) * LabelAppeal;
*** Effect: VolatileAcidity;
_zLP0 = _zLP0 + (0.14768124074929) * VolatileAcidity;
*** Effect: M_STARS;
_zLP0 = _zLP0 + (4.8228988073115) * _z0_0;

*** Predicted values;
_LP0 = _LP0 +                 1.15773484813543;
_LP0 = exp(_LP0);
pZero = _zLP0;
if (pZero < 0) then do;
   pZero = exp(pZero);
   pZero = pZero / (1 + pZero);
end;
else pZero = 1 / (1 + exp(-pZero));
_LP0 = _LP0 * (1-pZero);
HPGLM3SKIP_000:
P_TARGET = _LP0;
EM_PREDICTION = P_TARGET;
label EM_PREDICTION = 'Prediction for TARGET';
drop pzero;


run;

%mend;

*************************************************;
MACRO FOR ZERO_INFLATED NEGATIVE BINOMIAL MODEL
*************************************************;

%macro ZERO_INF_NB(INFILE, OUTFILE);

data &OUTFILE.;
set &INFILE.;

length _WARN_ $4;
label _WARN_ = 'Warning' ;
_WARN_ = '';
drop _LMR_IMPUTE;
_LMR_IMPUTE = 0;
label pZero = 'Zero Inflation Probability';
label P_TARGET = 'Predicted: TARGET' ;
drop _LMR_BAD;
_LMR_BAD=0;

*** Check interval variables for missing values;
if nmiss(AcidIndex,IMP_Alcohol,IMP_STARS,LabelAppeal,VolatileAcidity,
        AcidIndex,IMP_Alcohol,IMP_STARS,LabelAppeal,VolatileAcidity) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;

*** Generate design variables for M_STARS;
drop _0_0 _0_1 ;
_0_0= 0;
_0_1= 0;
if missing( M_STARS ) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;
else do;
   length _st12 $ 12; drop _st12;
   _st12 = put(M_STARS, BEST12.);
   call dmnorm(_st12, 12);
   if _st12 = '1'  then do;
      _0_0 = 1;
   end;
   else if _st12 = '0'  then do;
      _0_1 = 1;
   end;
   else do;
      _0_0 = .;
      _0_1 = .;
      substr(_warn_,2,1) = 'U';
      _LMR_IMPUTE = 1;
   end;
end;

*** Generate design variables for M_STARS;
drop _z0_0 _z0_1 ;
_z0_0= 0;
_z0_1= 0;
if missing( M_STARS ) then do;
   substr(_WARN_,1,1) = 'M';
   _LMR_IMPUTE = 1;
end;
else do;
   length _st12 $ 12; drop _st12;
   _st12 = put(M_STARS, BEST12.);
   call dmnorm(_st12, 12);
   if _st12 = '1'  then do;
      _z0_0 = 1;
   end;
   else if _st12 = '0'  then do;
      _z0_1 = 1;
   end;
   else do;
      _z0_0 = .;
      _z0_1 = .;
      substr(_warn_,2,1) = 'U';
      _LMR_IMPUTE = 1;
   end;
end;

*** If missing or invalid inputs, use averages;
if _LMR_IMPUTE > 0 then do;
   _LP0 = 3.03594953667522;
   goto HPGLM5SKIP_000;
end;

*** Compute Linear Predictors;
drop _LP0;
_LP0 = 0;

*** Effect: AcidIndex;
_LP0 = _LP0 + (-0.02014891570712) * AcidIndex;
*** Effect: IMP_Alcohol;
_LP0 = _LP0 + (0.00722138186941) * IMP_Alcohol;
*** Effect: IMP_STARS;
_LP0 = _LP0 + (0.11227021929856) * IMP_STARS;
*** Effect: LabelAppeal;
_LP0 = _LP0 + (0.23130509957166) * LabelAppeal;
*** Effect: VolatileAcidity;
_LP0 = _LP0 + (-0.01388512400447) * VolatileAcidity;
*** Effect: M_STARS;
_LP0 = _LP0 + (-0.16064894718763) * _0_0;
drop _zLP0;
_zLP0 = (-3.53145674181152);
*** Effect: AcidIndex;
_zLP0 = _zLP0 + (0.42179932698162) * AcidIndex;
*** Effect: IMP_Alcohol;
_zLP0 = _zLP0 + (0.03596875195657) * IMP_Alcohol;
*** Effect: IMP_STARS;
_zLP0 = _zLP0 + (-2.34201033962066) * IMP_STARS;
*** Effect: LabelAppeal;
_zLP0 = _zLP0 + (1.32490431079793) * LabelAppeal;
*** Effect: VolatileAcidity;
_zLP0 = _zLP0 + (0.14768124071377) * VolatileAcidity;
*** Effect: M_STARS;
_zLP0 = _zLP0 + (4.82289880943562) * _z0_0;

*** Predicted values;
_LP0 = _LP0 +                 1.15773484813749;
_LP0 = exp(_LP0);
pZero = _zLP0;
if (pZero < 0) then do;
   pZero = exp(pZero);
   pZero = pZero / (1 + pZero);
end;
else pZero = 1 / (1 + exp(-pZero));
_LP0 = _LP0 * (1-pZero);
HPGLM5SKIP_000:
P_TARGET = _LP0;
EM_PREDICTION = P_TARGET;
label EM_PREDICTION = 'Prediction for TARGET';
drop pzero;


run;

%mend;

*************************************************;
MACRO FOR LINEAR REGRESSION MODEL
*************************************************;

%macro LINEAR_REG(INFILE, OUTFILE);

data &OUTFILE.;
set &INFILE.;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;


drop _DM_BAD;
_DM_BAD=0;

*** Check AcidIndex for missing values ;
if missing( AcidIndex ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check IMP_Alcohol for missing values ;
if missing( IMP_Alcohol ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check IMP_STARS for missing values ;
if missing( IMP_STARS ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check LabelAppeal for missing values ;
if missing( LabelAppeal ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check VolatileAcidity for missing values ;
if missing( VolatileAcidity ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for M_STARS ;
drop _0_0 ;
if missing( M_STARS ) then do;
   _0_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_STARS , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _0_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _0_0 = -1;
   end;
   else do;
      _0_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _LP0 =     3.03594953667522;
   goto REGDR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: AcidIndex ;
_TEMP = AcidIndex ;
_LP0 = _LP0 + (   -0.20700924945009 * _TEMP);

***  Effect: IMP_Alcohol ;
_TEMP = IMP_Alcohol ;
_LP0 = _LP0 + (    0.01564995563998 * _TEMP);

***  Effect: IMP_STARS ;
_TEMP = IMP_STARS ;
_LP0 = _LP0 + (     0.6998948686725 * _TEMP);

***  Effect: LabelAppeal ;
_TEMP = LabelAppeal ;
_LP0 = _LP0 + (    0.41738031748925 * _TEMP);

***  Effect: M_STARS ;
_TEMP = 1;
_LP0 = _LP0 + (    1.10140878055462) * _TEMP * _0_0;

***  Effect: VolatileAcidity ;
_TEMP = VolatileAcidity ;
_LP0 = _LP0 + (    -0.0937042242206 * _TEMP);
*--- Intercept ---*;
_LP0 = _LP0 + (    2.58331477769385);

REGDR1:

*** Predicted Value;
label P_TARGET = 'Predicted: TARGET' ;
P_TARGET = _LP0;


run;

%mend;

*************************************************;
MACRO FOR DECISION_TREE MODEL
*************************************************;

%macro DecTree(INFILE, OUTFILE);

data &OUTFILE.;
set &INFILE.;

 
******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
LENGTH _WARN_  $    4;
 
******              LABELS FOR NEW VARIABLES              ******;
label _NODE_ = 'Node' ;
label _LEAF_ = 'Leaf' ;
label P_TARGET = 'Predicted: TARGET' ;
label _WARN_ = 'Warnings' ;
 
 
******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
 
 
******             ASSIGN OBSERVATION TO NODE             ******;
_ARBFMT_12 = PUT( M_STARS , BEST12.);
 %DMNORMIP( _ARBFMT_12);
IF _ARBFMT_12 IN ('1' ) THEN DO;
  IF  NOT MISSING(AcidIndex ) AND
                     8.5 <= AcidIndex  THEN DO;
    IF  NOT MISSING(AcidIndex ) AND
                      10.5 <= AcidIndex  THEN DO;
      IF  NOT MISSING(IMP_pH ) AND
        IMP_pH  <                2.185 THEN DO;
        IF  NOT MISSING(IMP_pH ) AND
                          2.01 <= IMP_pH  THEN DO;
          _NODE_  =                   47;
          _LEAF_  =                   33;
          P_TARGET  =                  2.5;
          END;
        ELSE DO;
          _NODE_  =                   46;
          _LEAF_  =                   32;
          P_TARGET  =     0.21428571428571;
          END;
        END;
      ELSE DO;
        _NODE_  =                   29;
        _LEAF_  =                   34;
        P_TARGET  =     0.17679558011049;
        END;
      END;
    ELSE DO;
      IF  NOT MISSING(IMP_TotalSulfurDioxide ) AND
                       120.5 <= IMP_TotalSulfurDioxide  THEN DO;
        IF  NOT MISSING(IMP_TotalSulfurDioxide ) AND
          IMP_TotalSulfurDioxide  <                  168 THEN DO;
          _NODE_  =                   44;
          _LEAF_  =                   30;
          P_TARGET  =     1.81481481481481;
          END;
        ELSE DO;
          _NODE_  =                   45;
          _LEAF_  =                   31;
          P_TARGET  =     0.88709677419354;
          END;
        END;
      ELSE DO;
        _NODE_  =                   26;
        _LEAF_  =                   29;
        P_TARGET  =     0.57750759878419;
        END;
      END;
    END;
  ELSE DO;
    IF  NOT MISSING(IMP_TotalSulfurDioxide ) AND
      IMP_TotalSulfurDioxide  <                104.5 THEN DO;
      IF  NOT MISSING(IMP_pH ) AND
                       3.305 <= IMP_pH  THEN DO;
        IF  NOT MISSING(VolatileAcidity ) AND
          VolatileAcidity  <                0.345 THEN DO;
          _NODE_  =                   42;
          _LEAF_  =                   26;
          P_TARGET  =               1.1875;
          END;
        ELSE DO;
          _NODE_  =                   43;
          _LEAF_  =                   27;
          P_TARGET  =     0.50295857988165;
          END;
        END;
      ELSE DO;
        _NODE_  =                   24;
        _LEAF_  =                   25;
        P_TARGET  =     1.47058823529411;
        END;
      END;
    ELSE DO;
      _NODE_  =                   13;
      _LEAF_  =                   28;
      P_TARGET  =     1.66939611054247;
      END;
    END;
  END;
ELSE DO;
  IF  NOT MISSING(IMP_STARS ) AND
    IMP_STARS  <                  1.5 THEN DO;
    IF  NOT MISSING(LabelAppeal ) AND
      LabelAppeal  <                 -0.5 THEN DO;
      IF  NOT MISSING(LabelAppeal ) AND
        LabelAppeal  <                 -1.5 THEN DO;
        _NODE_  =                   16;
        _LEAF_  =                    1;
        P_TARGET  =     1.65333333333333;
        END;
      ELSE DO;
        IF  NOT MISSING(AcidIndex ) AND
                          10.5 <= AcidIndex  THEN DO;
          _NODE_  =                   31;
          _LEAF_  =                    4;
          P_TARGET  =     0.78260869565217;
          END;
        ELSE DO;
          IF  NOT MISSING(VolatileAcidity ) AND
                           0.325 <= VolatileAcidity  THEN DO;
            _NODE_  =                   49;
            _LEAF_  =                    3;
            P_TARGET  =     2.10344827586206;
            END;
          ELSE DO;
            _NODE_  =                   48;
            _LEAF_  =                    2;
            P_TARGET  =     2.55418719211822;
            END;
          END;
        END;
      END;
    ELSE DO;
      IF  NOT MISSING(AcidIndex ) AND
                        10.5 <= AcidIndex  THEN DO;
        _NODE_  =                   19;
        _LEAF_  =                    9;
        P_TARGET  =     0.89583333333333;
        END;
      ELSE DO;
        IF  NOT MISSING(IMP_Chlorides ) AND
                        0.0635 <= IMP_Chlorides  THEN DO;
          IF  NOT MISSING(AcidIndex ) AND
            AcidIndex  <                  7.5 THEN DO;
            _NODE_  =                   52;
            _LEAF_  =                    7;
            P_TARGET  =     3.09580838323353;
            END;
          ELSE DO;
            _NODE_  =                   53;
            _LEAF_  =                    8;
            P_TARGET  =     2.22988505747126;
            END;
          END;
        ELSE DO;
          IF  NOT MISSING(LabelAppeal ) AND
                             0.5 <= LabelAppeal  THEN DO;
            _NODE_  =                   51;
            _LEAF_  =                    6;
            P_TARGET  =     3.58173076923077;
            END;
          ELSE DO;
            _NODE_  =                   50;
            _LEAF_  =                    5;
            P_TARGET  =      3.0050505050505;
            END;
          END;
        END;
      END;
    END;
  ELSE DO;
    IF  NOT MISSING(LabelAppeal ) AND
                       0.5 <= LabelAppeal  THEN DO;
      IF  NOT MISSING(IMP_STARS ) AND
        IMP_STARS  <                  2.5 THEN DO;
        IF  NOT MISSING(LabelAppeal ) AND
                           1.5 <= LabelAppeal  THEN DO;
          _NODE_  =                   39;
          _LEAF_  =                   20;
          P_TARGET  =     5.26027397260274;
          END;
        ELSE DO;
          IF  NOT MISSING(IMP_Alcohol ) AND
                          11.075 <= IMP_Alcohol  THEN DO;
            _NODE_  =                   63;
            _LEAF_  =                   19;
            P_TARGET  =     4.85990338164251;
            END;
          ELSE DO;
            _NODE_  =                   62;
            _LEAF_  =                   18;
            P_TARGET  =     4.42307692307692;
            END;
          END;
        END;
      ELSE DO;
        IF  NOT MISSING(LabelAppeal ) AND
                           1.5 <= LabelAppeal  THEN DO;
          IF  NOT MISSING(IMP_STARS ) AND
                             3.5 <= IMP_STARS  THEN DO;
            _NODE_  =                   67;
            _LEAF_  =                   24;
            P_TARGET  =     6.38095238095238;
            END;
          ELSE DO;
            _NODE_  =                   66;
            _LEAF_  =                   23;
            P_TARGET  =     5.88541666666666;
            END;
          END;
        ELSE DO;
          IF  NOT MISSING(IMP_STARS ) AND
                             3.5 <= IMP_STARS  THEN DO;
            _NODE_  =                   65;
            _LEAF_  =                   22;
            P_TARGET  =     5.58411214953271;
            END;
          ELSE DO;
            _NODE_  =                   64;
            _LEAF_  =                   21;
            P_TARGET  =     5.01828153564899;
            END;
          END;
        END;
      END;
    ELSE DO;
      IF  NOT MISSING(LabelAppeal ) AND
        LabelAppeal  <                 -0.5 THEN DO;
        IF  NOT MISSING(IMP_STARS ) AND
                           2.5 <= IMP_STARS  THEN DO;
          IF  NOT MISSING(IMP_STARS ) AND
                             3.5 <= IMP_STARS  THEN DO;
            _NODE_  =                   57;
            _LEAF_  =                   13;
            P_TARGET  =                 4.35;
            END;
          ELSE DO;
            _NODE_  =                   56;
            _LEAF_  =                   12;
            P_TARGET  =     3.46236559139785;
            END;
          END;
        ELSE DO;
          IF  NOT MISSING(LabelAppeal ) AND
            LabelAppeal  <                 -1.5 THEN DO;
            _NODE_  =                   54;
            _LEAF_  =                   10;
            P_TARGET  =     2.21153846153846;
            END;
          ELSE DO;
            _NODE_  =                   55;
            _LEAF_  =                   11;
            P_TARGET  =     2.93631669535284;
            END;
          END;
        END;
      ELSE DO;
        IF  NOT MISSING(IMP_STARS ) AND
                           2.5 <= IMP_STARS  THEN DO;
          IF  NOT MISSING(IMP_STARS ) AND
                             3.5 <= IMP_STARS  THEN DO;
            _NODE_  =                   61;
            _LEAF_  =                   17;
            P_TARGET  =     4.91791044776119;
            END;
          ELSE DO;
            _NODE_  =                   60;
            _LEAF_  =                   16;
            P_TARGET  =     4.24578651685393;
            END;
          END;
        ELSE DO;
          IF  NOT MISSING(IMP_Alcohol ) AND
            IMP_Alcohol  <     10.3429496855345 THEN DO;
            _NODE_  =                   58;
            _LEAF_  =                   14;
            P_TARGET  =     3.62738301559792;
            END;
          ELSE DO;
            _NODE_  =                   59;
            _LEAF_  =                   15;
            P_TARGET  =     3.97844112769486;
            END;
          END;
        END;
      END;
    END;
  END;

run;

%mend;

****************************************************************************************************************
PART 1: Exploratory Data Analysis
****************************************************************************************************************;

* Call dataset and rename the dataset to something shorter;
libname mydata '/folders/myfolders/sasuser.v94/' access=readonly;

data WINE;
	set mydata.WINE;
run;

* What are the variables available in the data set?;
proc contents data = WINE; run; quit;

* Print out the first 10 observations on the data set;
proc print data = WINE(obs=10); run; quit;

**************************************
* EDA OF RESPONSE VARIABLES
**************************************;

proc means data=WINE MEAN VAR;
var TARGET;
run;

proc freq data = WINE;
table target /missing;
run; 

%statistics(TARGET, WINE);

**************************************
* EDA OF PREDICTOR VARIABLES
**************************************;

%statistics(AcidIndex, WINE);
%statistics(Alcohol, WINE); 
%statistics(Chlorides, WINE); 
%statistics(CitricAcid, WINE);
%statistics(Density, WINE);
%statistics(FixedAcidity, WINE);
%statistics(FreeSulfurDioxide, WINE);
%statistics(LabelAppeal, WINE);
%statistics(ResidualSugar, WINE);
%statistics(STARS, WINE);
%statistics(Sulphates, WINE);
%statistics(TotalSulfurDioxide, WINE); 
%statistics(VolatileAcidity, WINE);
%statistics(pH, WINE);

* This should be a categorical variable;
proc freq data = WINE;
table LabelAppeal /missing;
run; 

* This should be a categorical variable;
proc freq data = WINE;
table STARS /missing;
run; 


* Correlation Matrix of all candidate predictor variables;
ods select PearsonCorr;
proc corr data= WINE noprob outp = OutCorr;   
var TARGET AcidIndex Alcohol Chlorides CitricAcid Density FixedAcidity FreeSulfurDioxide LabelAppeal ResidualSugar
STARS Sulphates TotalSulfurDioxide VolatileAcidity pH;
run;


****************************************************************************************************************
PART 2: Imputation and Variable Transformation
****************************************************************************************************************;

%Wine_Imp_Trans(WINE, WINE_IMP_TRANS);



********************************************************************
PART 4: Create 70/30 Train/Test Split of dataset 
********************************************************************;

data
WINE_IMP_TRANS_TRAIN(label="")
WINE_IMP_TRANS_TEST(label="")
;
retain _seed_ 12346;
drop _seed_ _genvalue_;
call ranuni(_seed_, _genvalue_);
label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, sample_dataobs_vlabel, NOQUOTE))";
_dataobs_ = _N_;
drop _c00:;

set WINE_IMP_TRANS;
if (12795 +1-_n_)*_genvalue_ <= (8957 - _C000001) then do;
_C000001 + 1;
output WINE_IMP_TRANS_TRAIN;
end;
else do;
_C000002 + 1;
output WINE_IMP_TRANS_TEST;
end;
run;
run;


****************************************************************************************************************
PART 3: Model Building
****************************************************************************************************************;

**************************************
* Hand-picked Poisson Model
**************************************;

* Trial 1;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides CitricAcid Density FixedAcidity IMP_FreeSulfurDioxide LabelAppeal
IMP_ResidualSugar IMP_STARS IMP_Sulphates IMP_TotalSulfurDioxide VolatileAcidity IMP_pH
M_Alcohol M_Chlorides M_FreeSulfurDioxide M_ResidualSugar M_STARS M_Sulphates M_TotalSulfurDioxide M_pH
/link=log dist=poi; 
output out=HAND_OUTFILE p=Y_POI;
run;

* Trial 2;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides CitricAcid Density IMP_FreeSulfurDioxide LabelAppeal
IMP_ResidualSugar IMP_STARS IMP_Sulphates IMP_TotalSulfurDioxide VolatileAcidity IMP_pH
M_Alcohol M_FreeSulfurDioxide M_ResidualSugar M_STARS M_Sulphates M_TotalSulfurDioxide M_pH
/link=log dist=poi; 
output out=HAND_OUTFILE p=Y_POI;
run;

* Trial 3;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides CitricAcid Density IMP_FreeSulfurDioxide LabelAppeal
IMP_STARS IMP_Sulphates IMP_TotalSulfurDioxide VolatileAcidity IMP_pH
M_Alcohol M_ResidualSugar M_STARS M_Sulphates M_TotalSulfurDioxide M_pH
/link=log dist=poi; 
output out=HAND_OUTFILE p=Y_POI;
run;

* Trial 4;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides CitricAcid Density IMP_FreeSulfurDioxide LabelAppeal
IMP_STARS IMP_Sulphates IMP_TotalSulfurDioxide VolatileAcidity IMP_pH M_ResidualSugar M_STARS M_Sulphates M_pH
/link=log dist=poi; 
output out=HAND_OUTFILE p=Y_POI;
run;

* Trial 5;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides Density IMP_FreeSulfurDioxide LabelAppeal
IMP_STARS IMP_Sulphates IMP_TotalSulfurDioxide VolatileAcidity IMP_pH M_ResidualSugar M_STARS M_Sulphates
output out=HAND_OUTFILE p=Y_POI;
run;

* Trial 6;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides IMP_FreeSulfurDioxide LabelAppeal
IMP_STARS IMP_Sulphates IMP_TotalSulfurDioxide VolatileAcidity M_ResidualSugar M_STARS M_Sulphates
/link=log dist=poi; 
output out=HAND_OUTFILE p=Y_POI;
run;

* Trial 7;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides IMP_FreeSulfurDioxide LabelAppeal
IMP_STARS IMP_TotalSulfurDioxide VolatileAcidity M_ResidualSugar M_STARS 
/link=log dist=poi; 
output out=HAND_OUTFILE p=Y_POI;
run;

* Trial 8;
proc genmod data=WINE_IMP_TRANS_TRAIN;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides IMP_FreeSulfurDioxide LabelAppeal
IMP_STARS IMP_TotalSulfurDioxide VolatileAcidity M_STARS 
/link=log dist=poi; 
output out=HAND_OUTFILE p=Y_POI;
run;

* Calculate MSE; 
data HAND_OUTFILE;
set HAND_OUTFILE;
square_error = (TARGET - Y_POI)**2;

proc means data = HAND_OUTFILE;
title 'MSE'
var square_error;
run; quit;

* Cross-validation w/test set;
proc genmod data=WINE_IMP_TRANS_TEST;
model TARGET = AcidIndex IMP_Alcohol IMP_Chlorides IMP_FreeSulfurDioxide LabelAppeal
IMP_STARS IMP_TotalSulfurDioxide VolatileAcidity M_STARS 
/link=log dist=poi; 
output out=HAND_OUTFILE_TEST p=Y_POI;
run;

* Calculate MSE; 
data HAND_OUTFILE_TEST;
set HAND_OUTFILE_TEST;
square_error = (TARGET - Y_POI)**2;


proc means data = HAND_OUTFILE_TEST;
title 'MSE'
var square_error;
run; quit;

**************************************
* Poisson Model (using ANN) with transformed variables;
**************************************;

%POISSON(WINE_IMP_TRANS_TRAIN, OUTFILE_POISSON);
%POISSON(WINE_IMP_TRANS_TEST, OUTFILE_POISSON_TEST);

**************************************
* Negative Binomial Regression;
**************************************;

%NEGATIVE_BINOMIAL(WINE_IMP_TRANS_TRAIN, OUTFILE_NB);
%NEGATIVE_BINOMIAL(WINE_IMP_TRANS_TEST, OUTFILE_NB_TEST);

**************************************
* Zero-Inflated Poisson Regression;
**************************************;

%ZERO_INF_POISSON(WINE_IMP_TRANS_TRAIN, OUTFILE_ZIP);
%ZERO_INF_POISSON(WINE_IMP_TRANS_TEST, OUTFILE_ZIP_TEST);

**************************************
* Zero-Inflated Negative Binomial;
**************************************;

%ZERO_INF_NB(WINE_IMP_TRANS_TRAIN, OUTFILE_ZIP_NB);
%ZERO_INF_NB(WINE_IMP_TRANS_TEST, OUTFILE_ZIP_NB_TEST);

**************************************
* Linear Regression;
**************************************;

%LINEAR_REG(WINE_IMP_TRANS_TRAIN, OUTFILE_LR);
%LINEAR_REG(WINE_IMP_TRANS_TEST, OUTFILE_LR_TEST);

**************************************
* Decision Tree;
**************************************;

%DecTree(WINE_IMP_TRANS_TRAIN, OUTFILE_LR);
%DecTree(WINE_IMP_TRANS_TEST, OUTFILE_LR_TEST);